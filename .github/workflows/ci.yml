name: Build and Release

permissions:
  contents: write

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            triplet: linux
          - os: windows-latest
            triplet: windows

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # ---------- deps ----------
      - name: Install deps (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libsfml-dev nlohmann-json3-dev zip patchelf

      - name: Install vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:USERPROFILE\vcpkg
          & $env:USERPROFILE\vcpkg\bootstrap-vcpkg.bat

      - name: Install libs via vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $triplet = "x64-windows"
          & $env:USERPROFILE\vcpkg\vcpkg.exe install sfml nlohmann-json --triplet $triplet
          echo "VCPKG_TRIPLET=$triplet" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKG_ROOT=$env:USERPROFILE\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKG_BIN=$env:USERPROFILE\vcpkg\installed\$triplet\bin" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # ---------- configure & build ----------
      - name: Configure (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cmake --build build --config Release -- -j$(nproc)

      - name: Configure (Windows)
        if: matrix.os == 'windows-latest'
        run: >
          cmake -S . -B build
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_TOOLCHAIN_FILE=%VCPKG_ROOT%\scripts\buildsystems\vcpkg.cmake
          -DVCPKG_TARGET_TRIPLET=%VCPKG_TRIPLET%

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake --build build --config Release -- /m

      # ---------- compute search dirs for fixup_bundle ----------
      - name: Compute FIXUP_SEARCH_DIRS (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: echo "FIXUP_SEARCH_DIRS=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

      - name: Compute FIXUP_SEARCH_DIRS (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Берём dll из vcpkg bin
          echo "FIXUP_SEARCH_DIRS=$env:VCPKG_BIN" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # ---------- install (stage) with fixup_bundle ----------
      - name: Install (stage) (Linux)
        if: matrix.os == 'ubuntu-latest'
        env:
          FIXUP_SEARCH_DIRS: ${{ env.FIXUP_SEARCH_DIRS }}
        run: |
          cmake --install build --prefix "$PWD/dist/linux"
          ls -la dist/linux

      - name: Install (stage) (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          FIXUP_SEARCH_DIRS: ${{ env.FIXUP_SEARCH_DIRS }}
        run: |
          cmake --install build --prefix "$PWD\dist\windows"
          Get-ChildItem -Recurse dist\windows

      # ---------- package ----------
      - name: Package (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd dist/linux
          test -x ./HeartStringsFunnyBones || (echo "No binary"; ls -la; exit 1)
          zip -r ../release-linux.zip HeartStringsFunnyBones assets config

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd dist\windows
          if (!(Test-Path .\HeartStringsFunnyBones.exe)) { Write-Host "No exe"; Get-ChildItem; exit 1 }
          Compress-Archive -Path HeartStringsFunnyBones.exe, assets, config -DestinationPath ..\release-windows.zip -Force

      - name: Upload artifact (zip)
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.triplet }}
          path: |
            dist/release-${{ matrix.triplet }}.zip
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: [build]
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' &&
       github.event.action == 'closed' &&
       github.event.pull_request.merged == true)

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Show downloaded files
        run: ls -R artifacts

      - name: Set version
        id: version
        run: echo "VERSION=v$(date +'%Y.%m.%d').${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: ${{ steps.version.outputs.VERSION }}
          files: |
            artifacts/release-linux/release-linux.zip
            artifacts/release-windows/release-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
