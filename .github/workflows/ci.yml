name: CI

on:
  push:
    branches: [ main ]
    tags:     [ 'v*' ]     # релиз по тегу вида v1.2.3
  pull_request:
  workflow_dispatch:

permissions:
  contents: write          # нужно для публикации релиза

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_NAME: HeartStringsFunnyBones
  BUILD_TYPE: Release

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up CMake + Ninja
        uses: lukka/get-cmake@v3.31.6

      # ВКЛЮЧАЕМ MSVC ОКРУЖЕНИЕ, чтобы Ninja использовал cl.exe (а не MinGW)
      - name: Setup MSVC dev environment (x64)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Зависимости SFML для Ubuntu (X11/OpenGL/Audio/FreeType/OGG/Vorbis)
      - name: Install SFML deps (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libx11-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev \
            libgl1-mesa-dev libfreetype6-dev \
            libopenal-dev libflac-dev libvorbis-dev libogg-dev

      - name: Configure
        run: >
          cmake -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Install to staging
        run: cmake --install build --config ${{ env.BUILD_TYPE }} --prefix "$PWD/staging"
        shell: bash

      - name: Pack artifact
        run: |
          mkdir -p release
          cd staging
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "../release/${{ env.APP_NAME }}-windows-latest.zip" *
          else
            zip -r "../release/${{ env.APP_NAME }}-ubuntu-latest.zip" *
          fi
        shell: bash

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows-latest
          path: release/${{ env.APP_NAME }}-windows-latest.zip
          if-no-files-found: error
          retention-days: 7

      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-ubuntu-latest
          path: release/${{ env.APP_NAME }}-ubuntu-latest.zip
          if-no-files-found: error
          retention-days: 7

  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: HeartStringsFunnyBones-windows-latest
          path: dl

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: HeartStringsFunnyBones-ubuntu-latest
          path: dl

      - name: Show downloaded files
        run: ls -la dl

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            dl/HeartStringsFunnyBones-windows-latest.zip
            dl/HeartStringsFunnyBones-ubuntu-latest.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
